package com.example.nework.dao

import androidx.paging.PagingSource
import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import com.example.nework.entity.EventEntity
import kotlinx.coroutines.flow.Flow

@Dao
interface EventDao {
    @Query("SELECT * FROM EventEntity ORDER BY id DESC")
    fun getAll(): Flow<List<EventEntity>>

    @Query("SELECT * FROM EventEntity ORDER BY id DESC")
    fun pagingSource(): PagingSource<Int, EventEntity>
    //pagingsource autogenerated by room
    //manual create pagingSource NOT! recommended

    @Query("SELECT * FROM EventEntity WHERE id = :id")
    fun getEventById(id: Int): EventEntity

    @Query("SELECT COUNT(*) FROM EventEntity")
    fun getSize(): Int

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insert(event: EventEntity)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insert(events: List<EventEntity>)

    @Query("DELETE FROM EventEntity WHERE id = :id")
    suspend fun removeById(id: Int)

    @Query(
        """
                UPDATE EventEntity SET
                    likes = likes + CASE WHEN likedByMe THEN -1 ELSE 1 END,
                    likedByMe = CASE WHEN likedByMe THEN 0 ELSE 1 END
                WHERE id = :id;
            """
    )
    suspend fun likeEventById(id: Int)

    @Query(
        """
                UPDATE EventEntity SET
                    isLikeLoading = CASE WHEN isLikeLoading THEN 0 ELSE 1 END
                WHERE id = :id;
            """
    )
    suspend fun changeLikeLoadingById(id: Int)

    @Query(
        """
                UPDATE EventEntity SET
                    participantsCount = participantsCount + CASE WHEN participatedByMe THEN -1 ELSE 1 END,
                    participatedByMe = CASE WHEN participatedByMe THEN 0 ELSE 1 END
                WHERE id = :id;
            """
    )
    suspend fun takePartEventById(id: Int)

    //for paging
    @Query("SELECT COUNT(*) == 0 FROM EventEntity")
    suspend fun isEmpty(): Boolean

    @Query("SELECT max(id) FROM EventEntity")
    suspend fun max(): Int?

    @Query("SELECT min(id) FROM EventEntity")
    suspend fun min(): Int?
}