package com.example.nework.dao

import androidx.paging.PagingSource
import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import com.example.nework.entity.UserEntity
import kotlinx.coroutines.flow.Flow

@Dao
interface UserDao {
    /*
    @Query("SELECT * FROM UserEntity ORDER BY id DESC")
    fun pagingSource(): PagingSource<Int, UserEntity>
    //pagingsource autogenerated by room
    //manual create pagingSource NOT! recommended
     */

    @Query("SELECT * FROM UserEntity ORDER BY id DESC")
    fun getAll(): Flow<List<UserEntity>>
    //pagingsource autogenerated by room
    //manual create pagingSource NOT! recommended

    @Query("SELECT * FROM UserEntity WHERE id = :id")
    fun getUserById(id: Int): UserEntity

    @Query("SELECT COUNT(*) FROM UserEntity")
    fun getSize(): Int

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insert(post: UserEntity)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insert(posts: List<UserEntity>)

    @Query("DELETE FROM UserEntity WHERE id = :id")
    suspend fun removeById(id: Int)

    @Query("DELETE FROM PostEntity")
    suspend fun clear()
}