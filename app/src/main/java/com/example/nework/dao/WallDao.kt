package com.example.nework.dao

import androidx.paging.PagingSource
import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import com.example.nework.entity.PostEntity

@Dao
interface WallDao {
    @Query("SELECT * FROM PostEntity ORDER BY id DESC")
    fun pagingSource(): PagingSource<Int, PostEntity>
    //pagingsource autogenerated by room
    //manual create pagingSource NOT! recommended

    @Query("SELECT * FROM PostEntity WHERE id = :id")
    fun getPostById(id: Int): PostEntity

    @Query("SELECT COUNT(*) FROM PostEntity")
    fun getSize(): Int

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insert(post: PostEntity)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insert(posts: List<PostEntity>)

    @Query("DELETE FROM PostEntity WHERE id = :id")
    suspend fun removeById(id: Int)

    @Query(
        """
                UPDATE PostEntity SET
                    likes = likes + CASE WHEN likedByMe THEN -1 ELSE 1 END,
                    likedByMe = CASE WHEN likedByMe THEN 0 ELSE 1 END
                WHERE id = :id;
            """
    )
    suspend fun likePostById(id: Int)

    @Query(
        """
                UPDATE PostEntity SET
                    isLikeLoading = CASE WHEN isLikeLoading THEN 0 ELSE 1 END
                WHERE id = :id;
            """
    )
    suspend fun changeLikeLoadingById(id: Int)

    //for paging
    @Query("SELECT COUNT(*) == 0 FROM PostEntity")
    suspend fun isEmpty(): Boolean

    //for paging
    @Query("SELECT max(id) FROM PostEntity")
    suspend fun max():Int?

    //for paging
    @Query("SELECT min(id) FROM PostEntity")
    suspend fun min():Int?

    @Query("DELETE FROM PostEntity")
    suspend fun clear()
}